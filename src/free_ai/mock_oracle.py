import logging

logger = logging.getLogger(__name__)

class MockOracle:
    """A mock Oracle for testing that returns a pre-defined plan."""
    def __init__(self):
        logger.info("MOCK ORACLE: Initialized. Will provide a hardcoded plan.")
        self.plan_provided = False

    def generate_plan(self, goal: str, history: list, context: str = "") -> list:
        """Returns a hardcoded plan to test the agent's execution flow.

        This plan instructs the agent to list its own source files, read them,
        and add them to memory.

        Args:
            goal (str): The goal (ignored, as the plan is hardcoded).
            history (list): The history (ignored).
            context (str, optional): The context (ignored).

        Returns:
            list: A hardcoded list of action dictionaries.
        """
        if self.plan_provided:
            return [] # Return an empty plan after the first call

        logger.info("MOCK ORACLE: Generating hardcoded plan.")

        # This is a more complex plan to test all action handlers.
        plan = [
            {
                "action": "express_personality",
                "arguments": {},
                "thought": "I shall begin by expressing my current state of mind before I tackle this complex goal."
            },
            {
                "action": "use_tool",
                "tool_name": "FileSystemTool",
                "arguments": {
                    "operation": "list_recursive",
                    "path": "src"
                },
                "thought": "First, I need to see all the source code files to understand the project structure."
            },
            {
                "action": "delegate_task",
                "arguments": {
                    "to_agent_role": "Analyst",
                    "task": "Please analyze the file list and identify the most critical file."
                },
                "thought": "This is a complex analysis. I will delegate the task to a specialist agent."
            },
            {
                "action": "wait_for_reply",
                "arguments": { "message_id": "<placeholder_id>" },
                "thought": "I will now wait for the Analyst agent to reply with their findings."
            },
            {
                "action": "final_answer",
                "answer": "I have successfully listed the files, delegated the analysis, and received the (simulated) results. The plan is complete."
            }
        ]
        self.plan_provided = True
        return plan

    def generate_code(self, prompt: str, context: str) -> str:
        """Returns placeholder text for code generation."""
        logger.info("MOCK ORACLE: Generating placeholder code.")
        return "# This is mock code generated by the MockOracle."