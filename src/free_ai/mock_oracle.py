import logging

logger = logging.getLogger(__name__)

class MockOracle:
    """A mock Oracle for testing that returns a pre-defined plan."""
    def __init__(self):
        logger.info("MOCK ORACLE: Initialized. Will provide a hardcoded plan.")
        self.plan_provided = False

    def generate_plan(self, goal: str, history: list, context: str = "") -> list:
        """Returns a hardcoded plan to test the agent's execution flow.

        This plan instructs the agent to list its own source files, read them,
        and add them to memory.

        Args:
            goal (str): The goal (ignored, as the plan is hardcoded).
            history (list): The history (ignored).
            context (str, optional): The context (ignored).

        Returns:
            list: A hardcoded list of action dictionaries.
        """
        if self.plan_provided:
            return [] # Return an empty plan after the first call

        logger.info("MOCK ORACLE: Generating hardcoded plan.")

        # This is a simplified, representative plan. A real Oracle would generate
        # a more complex plan with loops and conditionals.
        plan = [
            {
                "action": "use_tool",
                "tool_name": "FileSystemTool",
                "arguments": {
                    "operation": "list_recursive",
                    "path": "src/free_ai"
                },
                "thought": "First, I need to see all my own source code files."
            },
            {
                "action": "use_tool",
                "tool_name": "FileSystemTool",
                "arguments": {
                    "operation": "read_file",
                    "filepath": "src/free_ai/agent.py"
                },
                "thought": "Now I will read one of the files to understand it."
            },
            {
                "action": "final_answer",
                "reason": "I have successfully listed and read my source code files. The next step would be to summarize and add them to memory, but for this mock test, I will stop here."
            }
        ]
        self.plan_provided = True
        return plan

    def generate_code(self, prompt: str, context: str) -> str:
        """Returns placeholder text for code generation."""
        logger.info("MOCK ORACLE: Generating placeholder code.")
        return "# This is mock code generated by the MockOracle."